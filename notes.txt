package com.esi.daas.hdclaim.common.config; // Assuming this package based on previous context

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.util.StringUtils;

import javax.annotation.PostConstruct;
import java.util.Properties;

@Configuration
public class EmailConfig {

    private static final Logger logger = LoggerFactory.getLogger(EmailConfig.class);

    @Value("${mail.openshift.smtp.host}")
    private String host;

    @Value("${mail.openshift.smtp.port}")
    private String port;

    @Value("${mail.openshift.smtp.svacc.id}")
    private String username;

    @Value("${mail.openshift.smtp.svacc.pwd}")
    private String password;

    @Value("${mail.smtp.auth:true}")
    private boolean smtpAuth;

    @Value("${mail.smtp.starttls.enable:true}")
    private boolean startTlsEnabled;

    @Value("${mail.smtp.connectiontimeout:5000}")
    private int connectionTimeout;

    @Value("${mail.smtp.timeout:10000}")
    private int timeout;

    @PostConstruct
    public void validateProperties() {
        if (!StringUtils.hasText(host)) {
            throw new IllegalArgumentException("SMTP host must not be empty");
        }
        if (!StringUtils.hasText(username)) {
            throw new IllegalArgumentException("SMTP username must not be empty");
        }
        if (!StringUtils.hasText(password)) {
            logger.warn("SMTP password is empty. Ensure this is intentional.");
        }
    }

    @Bean
    public JavaMailSender javaMailSender() {
        JavaMailSenderImpl mailSender = new JavaMailSenderImpl();
        mailSender.setHost(host);
        
        try {
            mailSender.setPort(Integer.parseInt(port));
        } catch (NumberFormatException e) {
            logger.error("Invalid SMTP port value: {}. Defaulting to 587", port, e);
            mailSender.setPort(587); // Default SMTP port
        }

        mailSender.setUsername(username);
        mailSender.setPassword(password);

        Properties properties = new Properties();
        properties.put("mail.smtp.auth", String.valueOf(smtpAuth));
        properties.put("mail.smtp.starttls.enable", String.valueOf(startTlsEnabled));
        properties.put("mail.smtp.connectiontimeout", connectionTimeout); // 5 seconds
        properties.put("mail.smtp.timeout", timeout); // 10 seconds

        mailSender.setJavaMailProperties(properties);

        logger.info("JavaMailSender configured with host={}, port={}, username={}, smtpAuth={}, startTlsEnabled={}, connectionTimeout={}ms, timeout={}ms",
                host, port, username, smtpAuth, startTlsEnabled, connectionTimeout, timeout);

        return mailSender;
    }
}
