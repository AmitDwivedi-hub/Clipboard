package com.esi.daas.hdclaim.common.config; // Assuming this package based on previous context

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.context.annotation.Scope;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Projection;
import org.springframework.util.StringUtils;

import java.util.List;
import java.util.Properties;
import java.util.stream.Collectors;

@Configuration
@Slf4j
public class ProtocolConfig {

    private final MongoTemplate mongoTemplate;

    @Autowired
    public ProtocolConfig(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    @Bean("protocolStore")
    @Primary
    @Scope("singleton")
    @Cacheable(value = "protocolStoreCache") // Cache the result
    public Properties getProperties() {
        try {
            // Use a projection to fetch only name and resolution fields
            Query query = new Query();
            query.fields().include("name").include("resolution").exclude("_id");
            List<Protocol> protocolList = mongoTemplate.find(query, Protocol.class);

            // Convert list to Properties using streams
            Properties props = protocolList.stream()
                    .filter(this::isValidProtocol)
                    .collect(Collectors.toMap(
                            Protocol::getName,
                            Protocol::getResolution,
                            (v1, v2) -> v1, // Merge function in case of duplicate names (keep first)
                            Properties::new
                    ));

            log.info("Protocol Store successfully created with {} protocols", props.size());
            return props;
        } catch (Exception e) {
            log.error("Failed to load Protocol Store from MongoDB: {}", e.getMessage(), e);
            throw new RuntimeException("Failed to create Protocol Store", e);
        }
    }

    private boolean isValidProtocol(Protocol protocol) {
        if (protocol == null || !StringUtils.hasText(protocol.getName()) || !StringUtils.hasText(protocol.getResolution())) {
            log.warn("Skipping invalid protocol: name={}, resolution={}",
                    protocol != null ? protocol.getName() : null,
                    protocol != null ? protocol.getResolution() : null);
            return false;
        }
        return true;
    }
}

// Placeholder for the Protocol class (since it's not shown in the image)
class Protocol {
    private String name;
    private String resolution;

    public String getName() {
        return name;
    }

    public String getResolution() {
        return resolution;
    }
}
