import org.apache.commons.lang3.StringUtils;
import org.apache.commons.codec.binary.Base64;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.servlet.http.HttpServletRequest;

public class AuthorizationProcessor {
    private static final Logger log = LoggerFactory.getLogger(AuthorizationProcessor.class);
    private static final String AUTH_PREFIX = "Basic ";
    private static final String ERROR_ATTRIBUTE = "Error";

    private final ConfigServerScope configServerScope;

    public AuthorizationProcessor(ConfigServerScope configServerScope) {
        this.configServerScope = configServerScope;
    }

    public HttpServletRequest createAuthorization(HDRequestPayload inputRequest, HttpServletRequest request) {
        HDCustomHttpServletRequest hdCustomHttpServletRequest = new HDCustomHttpServletRequest(request);

        if (StringUtils.isNotBlank(inputRequest.getUserId()) && StringUtils.isNotBlank(inputRequest.getPassword())) {
            try {
                String encryptedPwd = EncryptionAlgo.encrypt(inputRequest.getPassword(), configServerScope.getSecretKey()); // Assuming encrypt is intended
                byte[] encodedAuth = Base64.encodeBase64(encryptedPwd.getBytes());
                String authHeader = AUTH_PREFIX + new String(encodedAuth);
                hdCustomHttpServletRequest.addHeader("Authorization", authHeader);
                log.debug("Authorization header set with encrypted credentials for userId: {}", inputRequest.getUserId());
            } catch (Exception e) {
                log.error("Failed to create Authorization header: {}", e.getMessage());
                request.setAttribute(ERROR_ATTRIBUTE, "Failed to encrypt credentials");
            }
        } else if (StringUtils.isNotBlank(inputRequest.getConsumer())) {
            String consumer = request.getHeader("consumer");
            if (StringUtils.isBlank(consumer)) {
                log.warn("Consumer header is missing");
                request.setAttribute(ERROR_ATTRIBUTE, "User Name and Password can not be empty");
            } else {
                log.debug("Consumer header processed: {}", consumer);
                // Optionally set consumer-related header if needed
                // hdCustomHttpServletRequest.addHeader("Consumer", consumer.toUpperCase());
            }
        } else {
            log.warn("No valid credentials or consumer provided");
            request.setAttribute(ERROR_ATTRIBUTE, "User Name and Password or Consumer must be provided");
        }

        return hdCustomHttpServletRequest;
    }
}
