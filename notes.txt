public Properties validateCred(HttpServletRequest header) throws Exception {
    String authHeader = header.getHeader("Authorization");
    if (authHeader == null || StringUtils.isBlank(authHeader)) {
        throw new BadCredentialsException("Unauthorized. Missing or invalid Authorization header");
    }

    if (!authHeader.startsWith("Basic ")) {
        throw new BadCredentialsException("Unauthorized. Invalid Authorization header format");
    }

    String[] credentials;
    try {
        credentials = new String(Base64.getDecoder().decode(authHeader.substring(6))).split(":");
    } catch (IllegalArgumentException e) {
        throw new BadCredentialsException("Unauthorized. Invalid Base64 encoding in Authorization header");
    }

    if (credentials.length != 2) {
        throw new BadCredentialsException("Unauthorized. Invalid credentials format");
    }

    if (StringUtils.isBlank(credentials[0])) {
        throw new BadCredentialsException("Unauthorized. UserID cannot be blank");
    }
    if (StringUtils.isBlank(credentials[1])) {
        throw new BadCredentialsException("Unauthorized. Password cannot be blank");
    }

    String userId = credentials[0];
    String password = credentials[1];
    props.put("username", userId);
    props.put("password", password);

    DatabaseConnector connector = new DatabaseConnector();
    try (Connection conn = connector.getConnection("DB2", userId, password)) {
        // Connection successful, no further action needed
    } catch (Exception e) {
        handleConnectionException(e);
    }

    return props;
}

private void handleConnectionException(Exception e) throws UnauthenticatedUserException {
    String message = e.getMessage();
    if (message.contains("Password expired")) {
        throw new UnauthenticatedUserException("Ticket Creation failed: Unauthorized user. Password expired.");
    } else if (message.contains("User ID invalid")) {
        throw new UnauthenticatedUserException("Ticket Creation failed: Unauthorized user. Invalid UserID.");
    } else if (message.contains("User ID or Password invalid")) {
        throw new UnauthenticatedUserException("Ticket Creation failed: Unauthorized user. Invalid UserID or Password.");
    } else if (message.contains("User ID revoked")) {
        throw new UnauthenticatedUserException("Ticket Creation failed: Unauthorized user. User ID in revoked status.");
    } else {
        throw new UnauthenticatedUserException("Ticket Creation failed: Unauthorized user. Unknown error: " + message);
    }
}
