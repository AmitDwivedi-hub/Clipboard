public static <T> void validateHeaders(String[][] FIELD_MAPPING, int sheetIndex, int startIndex, MultipartFile file) throws Exception {
    try (Workbook workbook = new XSSFWorkbook(file.getInputStream())) {
        // Validate workbook and sheet
        if (workbook == null) {
            throw new InvalidRequest("Workbook is null");
        }
        Sheet sheet = workbook.getSheetAt(sheetIndex);
        if (sheet == null) {
            throw new InvalidRequest("Sheet at index " + sheetIndex + " not found");
        }

        Row row = sheet.getRow(startIndex);
        if (row == null) {
            throw new InvalidRequest("Row at index " + startIndex + " not found");
        }

        List<String> headingList = new ArrayList<>();
        DataFormatter dataFormatter = new DataFormatter();

        // Collect headers from Excel row
        for (int i = 0; i < FIELD_MAPPING.length; i++) {
            Cell cell = row.getCell(i);
            String cellValue = (cell != null) ? dataFormatter.formatCellValue(cell).trim() : "";
            headingList.add(cellValue);
        }

        // Validate headers against FIELD_MAPPING (using first element of each sub-array)
        for (int i = 0; i < FIELD_MAPPING.length; i++) {
            if (i >= headingList.size() || FIELD_MAPPING[i] == null || FIELD_MAPPING[i].length == 0) {
                throw new InvalidTemplateException("Invalid FIELD_MAPPING configuration at index " + i);
            }
            String expected = FIELD_MAPPING[i][0].trim(); // First element is the expected header
            String actual = headingList.get(i);
            if (!actual.equals(expected)) {
                throw new InvalidTemplateException("The input excel template being used is " +
                    "not correct. Please re-download the latest one from SSP Portal. " +
                    "Expected column with name '" + expected + "' at index " + i);
            }
        }
    } catch (InvalidTemplateException e) {
        log.info(e.getMessage());
        throw e;
    } catch (Exception e) {
        log.info(e.getMessage());
        throw new InvalidRequest("Exception occurred while reading column headers.", e);
    }
}
