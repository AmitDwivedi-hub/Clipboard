import org.apache.commons.lang3.StringUtils;
import java.util.Base64;
import java.util.Properties;
import javax.servlet.http.HttpServletRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HeaderProcessor {
    private static final Logger log = LoggerFactory.getLogger(HeaderProcessor.class);
    private static final String AUTH_PREFIX = "Basic ";
    private static final String GENERIC_USER = "GENERIC_USER";
    private static final String NON_GENERIC_USER = "NON_GENERIC_USER";

    public Properties processHeader(HttpServletRequest header) throws BadCredentialsException {
        Properties properties = new Properties();
        String userType = determineUserType(header, properties);
        populateProperties(header, properties, userType);
        return properties;
    }

    private String determineUserType(HttpServletRequest header, Properties properties) throws BadCredentialsException {
        String authHeader = header.getHeader("Authorization");
        if (StringUtils.isBlank(authHeader)) {
            log.debug("Authorization header is missing, defaulting to GENERIC_USER");
            return GENERIC_USER;
        }

        if (!authHeader.startsWith(AUTH_PREFIX)) {
            log.warn("Invalid Authorization header format: {}", authHeader);
            throw new BadCredentialsException("Invalid Authorization header format");
        }

        String[] credentials = decodeCredentials(authHeader);
        validateCredentials(credentials);
        
        properties.put("username", credentials[0].trim().toUpperCase());
        properties.put("password", credentials[1].trim());
        return NON_GENERIC_USER;
    }

    private String[] decodeCredentials(String authHeader) throws BadCredentialsException {
        try {
            String encodedCredentials = authHeader.substring(AUTH_PREFIX.length());
            return new String(Base64.getDecoder().decode(encodedCredentials)).split(":", 2);
        } catch (IllegalArgumentException e) {
            log.error("Failed to decode Authorization header: {}", authHeader, e);
            throw new BadCredentialsException("Invalid Base64 encoding in Authorization header");
        }
    }

    private void validateCredentials(String[] credentials) throws BadCredentialsException {
        if (credentials.length != 2 || StringUtils.isBlank(credentials[0])) {
            log.warn("UserId is missing or blank in credentials");
            throw new BadCredentialsException("Unauthorized. UserId cannot be blank");
        }
        if (StringUtils.isBlank(credentials[1])) {
            log.warn("Password is missing or blank in credentials");
            throw new BadCredentialsException("Unauthorized. Password cannot be blank");
        }
    }

    private void populateProperties(HttpServletRequest header, Properties properties, String userType) {
        String[] headerKeys = {"emailId", "consumer", "userId", "team"};
        for (String key : headerKeys) {
            String value = header.getHeader(key);
            if (StringUtils.isBlank(value)) {
                log.info("{} is missing in header", key);
                properties.put(key, ""); // Set empty string for missing values
            } else {
                // Only consumer, userId, and team need to be uppercase
                if (!key.equals("emailId")) {
                    value = value.toUpperCase();
                }
                properties.put(key, value);
            }
        }
        properties.put("userType", userType);
    }
}
